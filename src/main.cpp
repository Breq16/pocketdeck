#include <stdio.h>
#include "main.h"
#include "drivers/trellis.h"
#include "drivers/display.h"

void i2c_setup() {
    i2c_init(FEATHER_I2C, 100 * 1000);

    gpio_set_function(FEATHER_SDA, GPIO_FUNC_I2C);
    gpio_set_function(FEATHER_SCL, GPIO_FUNC_I2C);

    gpio_pull_up(FEATHER_SDA);
    gpio_pull_up(FEATHER_SCL);
}


Trellis trellis;
Display display;

int main() {
    stdio_init_all();

    sleep_ms(2000);
    printf("setting up trellis\n");

    i2c_setup();
    trellis.init();

    // while (true) {
    //     trellis.pixels.set(0, 255, 255, 255);
    //     trellis.pixels.show();
    //     sleep_ms(500);

    //     trellis.pixels.set(0, 255, 0, 0);
    //     trellis.pixels.show();
    //     sleep_ms(500);

    //     trellis.pixels.set(0, 0, 255, 0);
    //     trellis.pixels.show();
    //     sleep_ms(500);

    //     trellis.pixels.set(0, 0, 0, 255);
    //     trellis.pixels.show();
    //     sleep_ms(500);
    // }

    sleep_ms(2000);
    printf("ready!\n");

    // while (true) {
    //     uint8_t event_count;
    //     uint8_t* events = trellis.keypad.events(event_count);

    //     for (int i = 0; i < event_count; ++i) {
    //         uint8_t event = events[i];

    //         uint8_t key = (event >> 2);
    //         Keypad::Edge edge = static_cast<Keypad::Edge>(event & 0x03);

    //         printf("Event %01d received on key %02d\n", edge, key);

    //         if (edge == Keypad::RISING) {
    //             trellis.pixels.set(key, 255, 255, 255);
    //         } else {
    //             trellis.pixels.set(key, 0, 0, 0);
    //         }
    //     }

    //     if (event_count) {
    //         trellis.pixels.show();
    //     }

    //     delete[] events;

    //     sleep_ms(20);
    // }

    display.init();

    printf("initted\n");

    // while (true) {
    //     display.flash();
    //     printf("flashed\n");
    // }

    const uint8_t splash_data[] = {
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001,
        0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b10000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b11000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000111, 0b11000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00001111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00011111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011111,
        0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11100000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11110000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b01111111, 0b11110000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011111,
        0b11111000, 0b01111111, 0b11110000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111110,
        0b01111111, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b01111111,
        0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00011111, 0b11111111, 0b11111011, 0b11100000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00001111, 0b11111111, 0b11111001, 0b11111111, 0b11000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00001111, 0b11111111, 0b11111001, 0b11111111, 0b11111000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000111,
        0b11111111, 0b11110001, 0b11111111, 0b11111111, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b11111100,
        0b01110011, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111110, 0b00111111,
        0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b00011110, 0b00001111,
        0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b01111111, 0b11111110, 0b00011111, 0b11111100,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00001111, 0b11011111, 0b11111111, 0b11100000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011111,
        0b00011001, 0b11111111, 0b11000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b00111100,
        0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b01111110, 0b01111100, 0b11111000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b01111111, 0b11111110, 0b01111100, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111,
        0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11101111,
        0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000001, 0b11111111, 0b11001111, 0b11111110,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000011, 0b11111111, 0b00000111, 0b11111110, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000011, 0b11111100, 0b00000111, 0b11111110, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011,
        0b11110000, 0b00000011, 0b11111110, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b10000000,
        0b00000000, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b01111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111110,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00001100, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000111,
        0b10000000, 0b00000000, 0b11111100, 0b00000000, 0b00000000, 0b00000011,
        0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000,
        0b00000001, 0b11111100, 0b00000000, 0b00000000, 0b00000011, 0b11000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000001,
        0b11111100, 0b00000000, 0b00000000, 0b00000011, 0b11000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000001, 0b11100000,
        0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b00000000, 0b00000000,
        0b00000000, 0b00000111, 0b10000000, 0b00000001, 0b11100000, 0b00000000,
        0b00000000, 0b00000000, 0b00011110, 0b00000000, 0b01111111, 0b11100011,
        0b11110111, 0b10011111, 0b11111001, 0b11111101, 0b11100111, 0b01111000,
        0b01111011, 0b11011111, 0b11000000, 0b11111111, 0b11110111, 0b11111111,
        0b10111111, 0b11111101, 0b11111101, 0b11111111, 0b01111000, 0b01111011,
        0b11011111, 0b11000000, 0b11111111, 0b11110111, 0b11111111, 0b10111111,
        0b11111101, 0b11111101, 0b11111111, 0b01111000, 0b01111011, 0b11011111,
        0b11000000, 0b11110000, 0b11110111, 0b10000111, 0b10111100, 0b00111101,
        0b11100001, 0b11111111, 0b01111000, 0b01111011, 0b11011110, 0b00000000,
        0b11110000, 0b11110111, 0b10000111, 0b10111100, 0b00111101, 0b11100001,
        0b11110000, 0b01111000, 0b01111011, 0b11011110, 0b00000000, 0b00000000,
        0b11110111, 0b10000111, 0b10000000, 0b00111101, 0b11100001, 0b11100000,
        0b01111000, 0b01111011, 0b11011110, 0b00000000, 0b01111111, 0b11110111,
        0b10000111, 0b10011111, 0b11111101, 0b11100001, 0b11100000, 0b01111000,
        0b01111011, 0b11011110, 0b00000000, 0b11111111, 0b11110111, 0b10000111,
        0b10111111, 0b11111101, 0b11100001, 0b11100000, 0b01111000, 0b01111011,
        0b11011110, 0b00000000, 0b11110000, 0b11110111, 0b10000111, 0b10111100,
        0b00111101, 0b11100001, 0b11100000, 0b01111000, 0b01111011, 0b11011110,
        0b00000000, 0b11110000, 0b11110111, 0b10000111, 0b10111100, 0b00111101,
        0b11100001, 0b11100000, 0b01111000, 0b01111011, 0b11011110, 0b00000000,
        0b11110000, 0b11110111, 0b10000111, 0b10111100, 0b00111101, 0b11100001,
        0b11100000, 0b01111000, 0b01111011, 0b11011110, 0b00000000, 0b11111111,
        0b11110111, 0b11111111, 0b10111111, 0b11111101, 0b11100001, 0b11100000,
        0b01111111, 0b11111011, 0b11011111, 0b11000000, 0b11111111, 0b11110111,
        0b11111111, 0b10111111, 0b11111101, 0b11100001, 0b11100000, 0b01111111,
        0b11111011, 0b11011111, 0b11000000, 0b01111100, 0b11110011, 0b11110011,
        0b10011111, 0b00111101, 0b11100001, 0b11100000, 0b00111110, 0b01111011,
        0b11001111, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
        0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11000000,
        0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111101, 0b01101000,
        0b11011011, 0b00010001, 0b00011010, 0b00110001, 0b11000000, 0b11111111,
        0b11111111, 0b11111111, 0b11111111, 0b11111101, 0b00101011, 0b01011010,
        0b11111011, 0b01101010, 0b11101111, 0b11000000, 0b11111111, 0b11111111,
        0b11111111, 0b11111111, 0b11111101, 0b01001011, 0b01011011, 0b00111011,
        0b00011010, 0b00110011, 0b11000000, 0b11111111, 0b11111111, 0b11111111,
        0b11111111, 0b11111101, 0b01101011, 0b01011011, 0b11011011, 0b01101010,
        0b11111101, 0b11000000,
    };

    display.draw(splash_data);

    return 0;
}


// #include <stdio.h>
// #include "pico/stdlib.h"
// #include "pico/binary_info.h"
// #include "hardware/i2c.h"

// // I2C reserves some addresses for special purposes. We exclude these from the scan.
// // These are any addresses of the form 000 0xxx or 111 1xxx
// bool reserved_addr(uint8_t addr) {
//     return (addr & 0x78) == 0 || (addr & 0x78) == 0x78;
// }

// int main() {
//     // Enable UART so we can print status output
//     stdio_init_all();
//     // This example will use I2C0 on the default SDA and SCL pins (4, 5 on a Pico)
//     i2c_init(i2c1, 100 * 1000);
//     gpio_set_function(2, GPIO_FUNC_I2C);
//     gpio_set_function(3, GPIO_FUNC_I2C);
//     gpio_pull_up(2);
//     gpio_pull_up(3);
//     // Make the I2C pins available to picotool
//     bi_decl(bi_2pins_with_func(2, 3, GPIO_FUNC_I2C));

//     sleep_ms(2000);

//     printf("\nI2C Bus Scan\n");
//     printf("   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n");

//     for (int addr = 0; addr < (1 << 7); ++addr) {
//         if (addr % 16 == 0) {
//             printf("%02x ", addr);
//         }

//         // Perform a 1-byte dummy read from the probe address. If a slave
//         // acknowledges this address, the function returns the number of bytes
//         // transferred. If the address byte is ignored, the function returns
//         // -1.

//         // Skip over any reserved addresses.
//         int ret;
//         uint8_t rxdata;
//         if (reserved_addr(addr))
//             ret = PICO_ERROR_GENERIC;
//         else
//             ret = i2c_read_blocking(i2c1, addr, &rxdata, 1, false);

//         printf(ret < 0 ? "." : "@");
//         printf(addr % 16 == 15 ? "\n" : "  ");
//     }
//     printf("Done.\n");
//     return 0;
// }